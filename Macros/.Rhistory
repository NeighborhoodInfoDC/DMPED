electiondata <- read_csv("~/perc election/electiondata.csv")
election_data_new <- electiondata %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_new <- electiondata %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
electiondata <- read_csv("~/perc election/electiondata.csv")
View(electiondata)
election_data_new <- electiondata %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
View(election_data_new)
election_data_new <- electiondata_new %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
election_data_new <- electiondata %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
electiondata <- read_csv("~/perc election/electiondata.csv")
election_data_new <- electiondata %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_new <- electiondata %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes)) %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- election_data_two_party %>% select(-office, -version)
election_data_republican <- election_data_two_party %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_democratic <- election_data_two_party
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
electiondata <- read_csv("~/perc election/electiondata.csv")
View(electiondata)
###step 2, filtering data
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- election_data_two_party %>% select(-office, -version)
election_data_republican <- election_data_two_party %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_democratic <- election_data_two_party
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- election_data_two_party %>% select(-office, -version)
View(election_data_two_party)
election_data_republican <- election_data_two_party %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_democratic <- election_data_two_party
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
election_data_democratic <- election_data_two_party %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
View(election_data_democratic)
election_data_democratic <- election_data_two_party %>% drop_na(democratic_votes)
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- election_data_two_party %>% select(-office, -version)
election_data_democratic <- election_data_two_party %>% drop_na(democratic_votes)
election_data_democratic <- election_data_two_party %>% drop_na(democratic_votes)
election_data_republican <- election_data_two_party %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_democratic <- election_data_two_party %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
election_data_democratic <- election_data_democratic %>%
unite(col = 'county_year', c(county_name, state, year), sep = " ", remove = FALSE)
election_data_republican <- election_data_republican %>%
unite(col = 'county_year', c(county_name, state, year), sep = " ", remove = FALSE)
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes, totalvotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
summarise(across(c(democratic_votes, candidatevotes, totalvotes), sum))
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
summarise(across(c(democratic_votes, candidatevotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
mutate(d_votes = sum(democratic_votes)) %>%
ungroup()
View(election_data_democratic_group)
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
mutate(d_votes = summarise(across(c(democratic_votes, candidatevotes), sum))) %>%
ungroup()
View(election_data_democratic_group)
lection_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
View(election_data_republican_group)
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
mutate(d_votes = summarise(across(c(democratic_votes, candidatevotes), sum))) %>%
ungroup()
View(election_data_democratic_group)
View(election_data_democratic)
View(election_data_democratic_group)
View(election_data_democratic)
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
mutate(d_votes = summarise(across(democratic_votes), sum)) %>%
ungroup()
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
mutate(d_votes = summarise(democratic_votes), sum) %>%
ungroup()
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
summarise(across(c(democratic_votes, candidatevotes), sum))
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
View(election_data_democratic_group)
View(election_data_republican_group)
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes, totalvotes), sum))
View(election_data_republican_group)
election_data_republican <- election_data_two_party %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_democratic <- election_data_two_party %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
election_data_democratic <- election_data_democratic %>%
unite(col = 'county_year', c(county_name, state, year), sep = " ", remove = FALSE)
election_data_republican <- election_data_republican %>%
unite(col = 'county_year', c(county_name, state, year), sep = " ", remove = FALSE)
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
summarise(across(c(democratic_votes, candidatevotes), sum))
library(tidyverse)
library(tidycensus)
library(data.table)
census_api_key("e623b8b3caeaf6ad382196d1dac43e625440e80f", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
####election data for perc
setwd("C:\\Users\\slieberman\\Documents\\states")
#step 1 importing MIT election lab data
library(readr)
library(readr)
electiondata <- read_csv("~/perc election/electiondata.csv")
View(electiondata)
###step 2, filtering data
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- election_data_two_party %>% select(-office, -version)
#remove rows with no votes
election_data_two_party <- election_data_two_party %>%
filter(totalvotes > 0)
write.csv(election_data_two_party, "election_data_two_party_basic.csv")
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- election_data_two_party %>% select(-office, -version)
#remove rows with no votes
election_data_two_party <- election_data_two_party %>%
filter(totalvotes > 0)
write.csv(election_data_two_party, "election_data_two_party_basic.csv")
election_data_two_party <- electiondata %>% filter(party == "DEMOCRAT" | party == "REPUBLICAN")
election_data_two_party <- election_data_two_party %>% select(-office, -version)
election_data_two_party <- election_data_two_party %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_two_party <- election_data_two_party %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
####12
election_data_democratic <- election_data_two_party %>% drop_na(democratic_votes)
election_data_republican <- election_data_two_party %>% drop_na(republican_votes)
new_combined <- cbind(election_data_democratic, election_data_republican)
###new script 7-12 to combine remove duplicates
election_data_democratic <- election_data_democratic %>%
unite(col = 'county_year', c(county_name, state, year), sep = " ", remove = FALSE)
election_data_republican <- election_data_republican %>%
unite(col = 'county_year', c(county_name, state, year), sep = " ", remove = FALSE)
election_data_republican_group <- election_data_republican %>%
group_by(county_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(county_year) %>%
summarise(across(c(democratic_votes, candidatevotes), sum))
sum(election_data_democratic_group$democratic_votes)
sum(election_data_democratic$candidatevotes)
sum(election_data_republican_group$republican_votes)
sum(election_data_republican$candidatevotes)
View(election_data_republican)
View(election_data_two_party)
republican_full <- left_join(election_data_republican_group, election_data_republican,
by = "county_year")
View(republican_full)
democratic_full <- left_join(election_data_democratic_group, election_data_democratic,
by = "county_year")
new_elections <- cbind(republican_full, democratic_full)
write.csv(new_elections, "new_elections.csv")
republican_full_distinct <- republican_full %>% distinct(county_year, .keep_all = TRUE)
sum(republican_full_distinct$republican_votes.x)
sum(republican_full_distinct$totalvotes)
sum(election_data_republican$totalvotes)
View(election_data_republican)
View(republican_full_distinct)
republican_full_distinct <- republican_full %>% filter(mode = "TOTAL")
republican_full_distinct <- republican_full %>% filter(mode == "TOTAL")
um(republican_full_distinct$totalvotes)
sum(republican_full_distinct$totalvotes)
republican_full_distinct <- republican_full %>% distinct(county_year, .keep_all = TRUE)
sum(republican_full_distinct$totalvotes)
republican_full_distinct <- republican_full_distinct %>%
mutate(republican_voteshare = republican_votes.x / totalvotes)
View(election_data_republican)
election_data_democratic <- election_data_democratic %>%
unite(col = 'fips_year', c(fips_codes, state, year), sep = " ", remove = FALSE)
election_data_democratic <- election_data_democratic %>% as.character(fips_codes)
election_data_democratic <- election_data_two_party %>% drop_na(democratic_votes)
election_data_democratic <- election_data_democratic %>%
mutate(fips_codes = (as.character(fips_codes))
election_data_democratic <- election_data_democratic %>%
mutate(fips_codes = (as.character(fips_codes)))
election_data_democratic <- election_data_democratic %>%
mutate(fips_codes = (as.character(fips_codes))
election_data_democratic <- election_data_democratic %>%
election_data_democratic <- election_data_democratic %>%
mutate(fips = as.character(fips_codes))
election_data_democratic %>%
as.character(fips_codes)
election_data_democratic <- election_data_democratic %>% mutate(codes =
as.character(fips_codes))
rlang::last_trace()
election_data_democratic$county_fips <- as.character(election_data_democratic$county_fips)
election_data_democratic <- election_data_democratic %>%
unite(col = 'fips_year', c(fips_codes, state, year), sep = " ", remove = FALSE)
View(election_data_democratic)
election_data_democratic <- election_data_democratic %>%
unite(col = 'fips_year', c(county_fips, state, year), sep = " ", remove = FALSE)
election_data_republican$county_fips <- as.character(election_data_republican$county_fips)
election_data_republican <- election_data_republican %>%
unite(col = 'fips_year', c(county_fips, state, year), sep = " ", remove = FALSE)
View(election_data_democratic)
election_data_republican_group <- election_data_republican %>%
group_by(fips_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(fips_year) %>%
summarise(across(c(democratic_votes, candidatevotes), sum))
um(election_data_democratic_group$democratic_votes)
sum(election_data_democratic_group$democratic_votes)
sum(election_data_democratic$candidatevotes)
republican_full <- left_join(election_data_republican_group, election_data_republican,
by = "fips_year")
democratic_full <- left_join(election_data_democratic_group, election_data_democratic,
by = "fips_year")
republican_full_distinct <- republican_full %>% distinct(fips_year, .keep_all = TRUE)
republican_full_distinct <- republican_full_distinct %>%
mutate(republican_voteshare = republican_votes.x / totalvotes)
democratic_full_distict <- democratic_full %>% distinct(fips_year, .keep_all = TRUE)
View(democratic_full_distict)
democratic_full_distict <- democratic_full_distict %>%
mutate(democratic_voteshare = democratic_votes.x / totalvotes)
View(democratic_full_distict)
democratic_full_distict <- democratic_full_distict %>%
select(-candidatevotes.y, -democratic_votes.y, republican_votes)
democratic_full_distict <- democratic_full_distict %>%
select(-candidatevotes.y, -democratic_votes.y, -republican_votes)
democratic_full_distict <- democratic_full_distict %>%
select(-republican_votes)
republican_full_distinct <- republican_full_distinct %>%
select(-candidatevotes.y, -republican_votes.y, -democratic_votes)
aggregated_set <- cbind(democratic_full_distict, republican_full_distinct)
View(aggregated_set)
election_data_two_party <- election_data_two_party %>%
mutate(republican_votes = case_when(party == "REPUBLICAN" ~
candidatevotes))
election_data_two_party <- election_data_two_party %>%
mutate(democratic_votes = case_when(party == "DEMOCRAT" ~
candidatevotes))
####12
election_data_democratic <- election_data_two_party %>% drop_na(democratic_votes)
election_data_republican <- election_data_two_party %>% drop_na(republican_votes)
new_combined <- cbind(election_data_democratic, election_data_republican)
###new script 7-12 to combine remove duplicates
election_data_democratic$county_fips <- as.character(election_data_democratic$county_fips)
election_data_republican$county_fips <- as.character(election_data_republican$county_fips)
election_data_democratic <- election_data_democratic %>%
unite(col = 'fips_year', c(county_fips, state, year), sep = " ", remove = FALSE)
election_data_republican <- election_data_republican %>%
unite(col = 'fips_year', c(county_fips, state, year), sep = " ", remove = FALSE)
election_data_republican_group <- election_data_republican %>%
group_by(fips_year) %>%
summarise(across(c(republican_votes, candidatevotes), sum))
election_data_democratic_group <- election_data_democratic  %>%
group_by(fips_year) %>%
summarise(across(c(democratic_votes, candidatevotes), sum))
republican_full <- left_join(election_data_republican_group, election_data_republican,
by = "fips_year")
democratic_full <- left_join(election_data_democratic_group, election_data_democratic,
by = "fips_year")
# new_elections <- cbind(republican_full, democratic_full)
# write.csv(new_elections, "new_elections.csv")
republican_full_distinct <- republican_full %>% distinct(fips_year, .keep_all = TRUE)
democratic_full_distict <- democratic_full %>% distinct(fips_year, .keep_all = TRUE)
republican_full_distinct <- republican_full_distinct %>%
mutate(republican_voteshare = republican_votes.x / totalvotes)
democratic_full_distict <- democratic_full_distict %>%
mutate(democratic_voteshare = democratic_votes.x / totalvotes)
democratic_full_distict <- democratic_full_distict %>%
select(-candidatevotes.y, -democratic_votes.y, -republican_votes)
republican_full_distinct <- republican_full_distinct %>%
select(-candidatevotes.y, -republican_votes.y, -democratic_votes)
aggregated_set <- cbind(democratic_full_distict, republican_full_distinct)
aggregated_set <- aggregated_set %>%
select(-candidatevotes.x)
write.csv(aggregated_set, "updated_vote_tallies.csv")
#########
library(tidyverse)
library(tidycensus)
library(sf)
library(mapview)
census_api_key("e623b8b3caeaf6ad382196d1dac43e625440e80f", install = TRUE, overwrite = TRUE)
readRenviron("~/.Renviron")
#ACS median home value 2018-2022
dc_median_home_value_22 <-
get_acs(geography = "tract",
variables = c("B25038_001", "B25107_001"),
year = 2022,
state = "DC",
geometry = TRUE)
dc_median_home_value_12 <-
get_acs(geography = "tract",
variable = c("B25038_001","B25107_001"),
year = 2012,
state = "DC",
geometry = TRUE)
#pull in total home counts dc
dc_median_home_value_2000 <-
get_decennial(geography = "tract",
variables = c("H076001"),
year = 2000,
state = "DC",
geometry = TRUE)
#median rents 2000 - 2022
dc_median_rent_2000 <-
get_decennial(geography = "tract",
variable = "H063001",
year = 2000,
state = "DC",
geometry = TRUE)
dc_median_rent_22 <-
get_acs(geography = "tract",
variable = "B25113_001",
year = 2022,
state = "DC",
geometry = TRUE)
dc_median_rent_2012 <-
get_acs(geography = "tract",
variable = "B25113_001",
year = 2012,
state = "DC",
geometry = TRUE)
#now going to cross walk the data
#need to get weights
#B25087_001
#130,865
total_unit_test <-
get_acs(geography = "tract",
variable = "B25087_001",
year = 2022,
state = "DC",
geometry = TRUE)
sum(total_unit_test$estimate)
#B25081_001
#130,865
total_unit_test_2 <-
get_acs(geography = "tract",
variable = "B25081_001",
year = 2022,
state = "DC",
geometry = TRUE)
sum(total_unit_test_2$estimate)
#B25042_001
#315,785 <- this is the right var
total_unit_test_3 <-
get_acs(geography = "tract",
variable = "B25042_001",
year = 2022,
state = "DC",
geometry = TRUE)
sum(total_unit_test_3$estimate)
##weight identified, B25042_001
#double checked below with sim, var same number comes out
total_unit_test_4 <-
get_acs(geography = "tract",
variable = "B25038_001",
year = 2022,
state = "DC",
geometry = TRUE)
sum(total_unit_test_4$estimate)
###now weighting vars
total_units_2022_alt <-
get_acs(geography = "tract",
variable = "B25038_001",
year = 2022,
state = "DC",
geometry = TRUE)
sum(total_units_2022_alt$estimate)
total_units_2022 <-
get_acs(geography = "tract",
variable = "B25042_001",
year = 2022,
state = "DC",
geometry = TRUE)
sum(total_units_2022$estimate)
total_units_2012 <-
get_acs(geography = "tract",
variable = "B25042_001",
year = 2012,
state = "DC",
geometry = TRUE)
total_units_2000 <-
get_decennial(geography = "tract",
variable = "H001001",
year = 2000,
state = "DC",
geometry = TRUE)
total_units_2010 <-
get_decennial(geography = "tract",
variable = "H001001",
year = 2010,
state = "DC",
geometry = TRUE)
#now joining the weights to the totals
#but first gonna import NHGIS weights
#they come from this link: https://www.nhgis.org/geographic-crosswalks
Crosswalk_2000_to_2010 <- read_csv("C:/Users/slieberman/Downloads/nhgis_tr2000_tr2010_11/nhgis_tr2000_tr2010_11.csv")
Crosswalk_2020_to_2010 <- read_csv("C:/Users/slieberman/Downloads/nhgis_tr2020_tr2010_11/nhgis_tr2020_tr2010_11.csv")
#crosswalking 2000 data to 2010
Crosswalk_2000_to_2010 <- Crosswalk_2000_to_2010 %>% mutate(GEOID = as.character(tr2000ge))
#(multiply median by (specific count, in this case housing count) to get back to count, then multiple by the weight),
#then divide by the count I used before grouping targets
#first put the total housing units through the crosswalk
total_units_2000_weights <- left_join(total_units_2000, Crosswalk_2000_to_2010, by = "GEOID")
#/
#/ #/ #/ #/ crosswalking 2000 to 2010 home value #\ #\
#/
home_value_df_2000 <- st_drop_geometry(dc_median_home_value_2000)
#now pull average values into the dataframe
consolidated_2000_value_unit_weights <- left_join(total_units_2000_weights, home_value_df_2000, by = "GEOID") #put in keep argument
#now multiply the totals by the median, this will be me aggregate metric
consolidated_2000_value_unit_weights <- consolidated_2000_value_unit_weights %>%
mutate(aggregate_metric = value.x * value.y)
#now multiply the aggregate across the crosswalk
consolidated_2000_value_unit_weights <- consolidated_2000_value_unit_weights %>%
mutate(aggregate_2010 = aggregate_metric * wt_ownhu)
#testing the formula
cons_test <- consolidated_2000_value_unit_weights %>%
mutate(new = aggregate_2010 / value.x)
#that works, I just need to group by right
##group by target geography and then summarize
# library(dplyr)
# df %>%
#   group_by(group_var1, group_var2) %>%
#   summarise(across(c(values_var1, values_var2), sum))
#
consolidated_2000_value_unit_weights_grouped <- consolidated_2000_value_unit_weights %>%
group_by(tr2010ge) %>%
summarise(across(c(aggregate_2010, value.x), sum))
#after that divide by the original count
consolidated_2000_value_unit_weights_grouped <- consolidated_2000_value_unit_weights_grouped %>%
mutate(crosswalked_2000_to_2010_home_values = aggregate_2010 / value.x)
#LETS GO THATS RIGHT
#consolidated_2000_value_unit_weights_grouped is the crosswalked home value data
#/
#/ #/ #/ #/ crosswalking 2000 to 2010 rents #\ #\
#/
dc_median_rent_2000_df <- st_drop_geometry(dc_median_rent_2000)
consolidated_2000_rent_unit_weights <- left_join(total_units_2000_weights, dc_median_rent_2000_df, by = "GEOID") #put in keep argument
#now multiply the totals by the median, this will be me aggregate metric
consolidated_2000_rent_unit_weights <- consolidated_2000_rent_unit_weights %>%
mutate(aggregate_metric = value.x * value.y)
#now multiply the aggregate across the crosswalk
consolidated_2000_rent_unit_weights <- consolidated_2000_rent_unit_weights %>%
mutate(aggregate_2010 = aggregate_metric * wt_renthu)
#grouping
consolidated_2000_rent_unit_weights_grouped <- consolidated_2000_rent_unit_weights %>%
group_by(tr2010ge) %>%
summarise(across(c(aggregate_2010, value.x), sum))
#after that divide by the original count
consolidated_2000_rent_unit_weights_grouped <- consolidated_2000_rent_unit_weights_grouped %>%
mutate(crosswalked_2000_rents = aggregate_2010 / value.x)
View(consolidated_2000_value_unit_weights)
View(consolidated_2000_rent_unit_weights_grouped)
View(consolidated_2000_rent_unit_weights)
View(consolidated_2000_rent_unit_weights_grouped)
View(consolidated_2000_value_unit_weights_grouped)
View(consolidated_2000_value_unit_weights)
